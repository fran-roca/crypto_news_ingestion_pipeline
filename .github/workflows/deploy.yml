name: Deploy to EC2

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub-Actions-Role
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Deploy to EC2 using SSM
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      run: |
        set +e

        # Build the command with variables expanded
        DEPLOY_COMMAND=$(cat << EOF
        export AWS_DEFAULT_REGION="${AWS_REGION}"
        export NEWS_API_KEY="${NEWS_API_KEY}"
        export KAFKA_BOOTSTRAP_SERVERS="${KAFKA_BOOTSTRAP_SERVERS}"
        export AWS_REGION="${AWS_REGION}"
        export IMAGE_NAME="${IMAGE_NAME}"
        export ECR_REGISTRY="${ECR_REGISTRY}"

        # Install AWS CLI if not present
        if ! command -v aws &> /dev/null; then
        echo "AWS CLI not found. Installing..."
        sudo apt-get update
        sudo apt-get install -y awscli
        fi
    
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
        echo "Docker not found. Installing..."
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker ssm-user
        fi
    
        # Create the Docker network if it doesn't exist
        sudo docker network ls | grep kafka_financial_news_network || sudo docker network create kafka_financial_news_network
    
        # Login to ECR
        aws ecr get-login-password --region "${AWS_REGION}" | sudo docker login --username AWS --password-stdin "${ECR_REGISTRY}"
    
        # Pull the Docker image
        sudo docker pull "${IMAGE_NAME}"
    
        # Stop and remove any existing container
        sudo docker stop financial-news-python-producer || true
        sudo docker rm financial-news-python-producer || true
    
        # Run the new Docker container
        sudo docker run -d \
        --name financial-news-python-producer \
        --network kafka_financial_news_network \
        -e NEWS_API_KEY="${NEWS_API_KEY}" \
        -e KAFKA_BOOTSTRAP_SERVERS="${KAFKA_BOOTSTRAP_SERVERS}" \
        -e KAFKA_TOPIC="news_topic" \
        -e LOG_TO_FILE="True" \
        "${IMAGE_NAME}"
        EOF
        )
        
        # Build the JSON parameters using jq
        PARAMETERS=$(jq -n --arg command "$DEPLOY_COMMAND" '{commands: [ $command ] }')
    
            # Send command through SSM and capture the CommandId
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters "$PARAMETERS" \
              --query 'Command.CommandId' \
                                                                         --output text)
        
        echo "Command sent. Command ID: $COMMAND_ID"
        
        # Wait for the command to complete (ignore errors)
        aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" || true
        
        # Get the command invocation result
        aws ssm get-command-invocation \
        --command-id "$COMMAND_ID" \
        --instance-id "$INSTANCE_ID" \
        --output json > command_output.json
        
        echo "Command execution details:"
        cat command_output.json
        
        # Extract the standard output and error
        STDOUT=$(jq -r '.StandardOutputContent' command_output.json)
        STDERR=$(jq -r '.StandardErrorContent' command_output.json)
        
        echo "Standard Output:"
        echo "$STDOUT"
        
        echo "Standard Error:"
        echo "$STDERR"
        
        # Exit with error if the command failed
        STATUS=$(jq -r '.Status' command_output.json)
        if [ "$STATUS" != "Success" ]; then
        echo "SSM command failed with status: $STATUS"
        exit 1
        fi
