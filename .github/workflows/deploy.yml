name: Deploy to EC2

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub-Actions-Role
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EC2 using SSM
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      run: |
        # Escape the command properly for JSON
        DEPLOY_COMMAND=$(cat << 'EOF'
        export AWS_DEFAULT_REGION=${AWS_REGION} && \
        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY} && \
        docker pull ${IMAGE_NAME} && \
        docker stop financial-news-python-producer || true && \
        docker rm financial-news-python-producer || true && \
        docker run -d \
          --name financial-news-python-producer \
          --network kafka_financial_news_network \
          -e NEWS_API_KEY="${NEWS_API_KEY}" \
          -e KAFKA_BOOTSTRAP_SERVERS="${KAFKA_BOOTSTRAP_SERVERS}" \
          -e KAFKA_TOPIC="news_topic" \
          -e LOG_TO_FILE="True" \
          ${IMAGE_NAME}
        EOF
        )

        # Send command through SSM with proper JSON formatting
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "{\"commands\":[\"$DEPLOY_COMMAND\"]}" \
          --output text

        # Wait for command to complete and check status
        sleep 10
        COMMAND_ID=$(aws ssm list-commands --filters "Key=Status,Value=Pending" | jq -r '.Commands[0].CommandId')
        aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID"